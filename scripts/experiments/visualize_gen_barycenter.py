import pickle
import numpy as np
import torch
import pyvista as pv
from pyvista import examples
from ega.util.mesh_transformations import rescale_data

###### The data folder will have 2 pickle files #####
###### One of them is generated by a well established algo and
###### *my.pkl is generated by mine" #####

#### Download data from drive https://drive.google.com/file/d/1dWAhFjWwQ7q43fk7jHinsNwKMSdAjjJq/view?usp=sharing
####  and save it into data/test_point_cloud_data/ #########

with open(".data/test_point_cloud_data/gen-interpolation-data-arijit.pkl", "rb") as ff:
    data = pickle.load(ff)


beta = pv.ParametricTorus()
beta = pv.PolyData(beta)

# rotate the tore
beta.rotate_y(90)

alpha = examples.download_bunny()
# rotate the bunny
alpha.rotate_x(100)
alpha.rotate_z(140)
alpha.rotate_y(-20)
alpha = alpha.smooth(100, relaxation_factor=0.1)
beta = beta.smooth(100, relaxation_factor=0.1)

alpha = rescale_data(alpha, 0.95)
beta = rescale_data(beta, 0.95)
width = 200
n_features = width**3


hist_grid = torch.linspace(-1.0, 1.0, width + 1)
grid = torch.linspace(-1.0, 1.0, width)
X, Y, Z = torch.meshgrid(grid, grid, grid)
threshold = 1e-7


plotter = pv.Plotter(off_screen=True, point_smoothing=True)
plotter.set_background("w")
plotter.add_mesh(alpha, color="r")
plotter.show(screenshot="./data/test_point_cloud_data/rabbit.png")

plotter = pv.Plotter(off_screen=True, point_smoothing=True)
plotter.set_background("w")
plotter.add_mesh(beta, color="r")
plotter.show(screenshot="./data/test_point_cloud_data/tore.png")


cpos = [(3.3, 3.3, 3.3), (0.0, 0.005, 0.0), (0.0, 0.0, 1.0)]
meshes = []
for key in ["ibp"]:
    meshes.append([])
    bars = data[key]["bars"]
    for ii, hist in enumerate(bars):
        print("->> creating mesh {} ... ".format(ii + 1))
        support = torch.where(hist > threshold)
        weights = hist[support].numpy()
        print(weights.shape)
        cloud = torch.stack((X[support], Y[support], Z[support])).t()
        print("CLOUD SHAPE", cloud.shape)
        mesh = pv.PolyData(cloud.numpy())
        mesh.add_field_array(1 - weights, "weights")
        meshes[-1].append(mesh)
        print("here")
        plotter = pv.Plotter(off_screen=True, point_smoothing=True)
        plotter.set_background("w")
        plotter.camera_position = cpos
        plotter.add_mesh(
            mesh,
            scalars="weights",
            opacity="weights",
            use_transparency=True,
            cmap="hot_r",
            style="surface",
            show_scalar_bar=False,
        )
        plotter.show(screenshot="fig/3d/%s-%d.png" % (key, ii))
        plotter.close()
